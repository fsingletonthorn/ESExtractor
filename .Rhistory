# extracting discovered hits + context
extractedContext <- lapply(patternsContext, function(patternsContext)
unlist(str_extract(inputText, regex(as.character(patternsContext), ignore_case = T))))
# returning all of this
statisticalOutput <- rbind(data_frame(statistic = "t",   cleaned = extractedClean[[1]], reported = extracted[[1]], context = extractedContext[[1]]),
data_frame(statistic = "F",   cleaned = extractedClean[[2]], reported = extracted[[2]],  context = extractedContext[[2]]),
data_frame(statistic = "r",   cleaned = extractedClean[[3]], reported = extracted[[3]],  context = extractedContext[[3]]),
data_frame(statistic = "chi", cleaned = extractedClean[[4]], reported = extracted[[4]],  context = extractedContext[[4]]),
data_frame(statistic = "d",   cleaned = extractedClean[[5]], reported = extracted[[5]],  context = extractedContext[[5]]),
data_frame(statistic = "eta", cleaned = extractedClean[[6]], reported = extracted[[6]],  context = extractedContext[[6]]),
data_frame(statistic = "HR",  cleaned = extractedClean[[7]], reported = extracted[[7]],  context = extractedContext[[7]]),
data_frame(statistic = "OR",  cleaned = extractedClean[[8]], reported = extracted[[8]],  context = extractedContext[[8]]))
} else {
statisticalOutput <- rbind(data_frame(statistic = "t", cleaned = extractedClean[[1]], reported = extracted[[1]]),
data_frame(statistic = "F", cleaned = extractedClean[[2]], reported = extracted[[2]]),
data_frame(statistic = "r", cleaned = extractedClean[[3]], reported = extracted[[3]]),
data_frame(statistic = "chi", cleaned = extractedClean[[4]], reported = extracted[[4]]),
data_frame(statistic = "d",   cleaned = extractedClean[[5]], reported = extracted[[5]]),
data_frame(statistic = "eta", cleaned = extractedClean[[6]], reported = extracted[[6]]),
data_frame(statistic = "HR",  cleaned = extractedClean[[7]], reported = extracted[[7]]),
data_frame(statistic = "OR",  cleaned = extractedClean[[8]], reported = extracted[[8]]))
}
if(purrr::is_empty(statisticalOutput[[1]]) |  (nrow(statisticalOutput) < 1)) {
if(context == F) {
data_frame(statistic = NA, cleaned = NA, reported = NA, value = NA,  df1 = NA, df2  = NA, p = NA)
} else {
data_frame(statistic = NA, cleaned = NA, reported = NA, context = NA, value = NA,  df1 = NA, df2  = NA, p = NA)
}
} else {
cbind(statisticalOutput, splitTestStatToDF(statistic = statisticalOutput$statistic, cleanedTestStat = statisticalOutput$cleaned), stringsAsFactors = F)
}
}
extractTestStats(testTString)[[3]]
# helper function to split the output into constituate parts
splitTestStatToDF <- function(statistic, cleanedTestStat) {
if ((length(cleanedTestStat) > 0) & (length(statistic) > 0)) {
testStatistic <-
str_extract(str_split(cleanedTestStat, "=", simplify = T)[, 2],
"-?\\d*\\.?\\d*")
df1 <-
case_when(statistic == "F" ~ c(str_extract(cleanedTestStat, "\\d{1,}(?=,)")),
TRUE ~ NA_character_)
# Add other statistics here below in addition to F
df2 <-
case_when(
statistic == "F" ~ str_extract(cleanedTestStat, "(?<=,)\\d{1,}"),
# If people have reported r(n=x) return as n df2 = n - 2
str_detect(statistic, "r") & str_detect(cleanedTestStat, "n=") ~
as.character(as.numeric(
str_extract(cleanedTestStat, "(?<=([a-zA-Z])\\(?(n\\=)?)\\d{1,}")
) - 2),
str_detect(statistic, "T|t|r|R") ~ str_extract(cleanedTestStat, "(?<=([a-zA-Z])\\(?(df\\s{0,10}\\=\\s{0,10})?)\\d{1,}"),
str_detect(statistic, "chi") ~ str_extract(cleanedTestStat, "(?<=\\((df\\s{0,10}=\\s{0,10})?)\\d{1,}"),
TRUE ~ NA_character_
)
p <-
str_extract(cleanedTestStat, "(?<=(p=?))[<>]?\\d?\\.\\d+e?-?\\d*")
data_frame(
value = testStatistic,
df1 = df1,
df2 = df2,
p = p
)
} else
NA_real_
}
# Check whether element exists and is not NA (or at least that th first element of an object is not NA)
elementExists <- function( full_index_path ){
tryCatch({
len_element = length(full_index_path)
if(is.na(full_index_path)[[1]]) {return(F)}
exists_indicator = ifelse(len_element > 0, T, F)
return(exists_indicator)
}, error = function(e) {
return(F)
})
}
# Function to add + and minus "contextSize" characters for a regex pattern
addContext <- function(extracted, contextSize) {
if( length(extracted) > 0) {
newSearchR  <- extracted %>%
str_replace_all("\\.", "\\\\.") %>%
str_replace_all("\\(", "\\\\(") %>%
str_replace_all("\\)", "\\\\)") %>%
paste0(".{0,", contextSize,"}",  . ,".{0,", contextSize,"}")
}
else {
NA
}
}
# For this to work it needs to be fed a single string
# function to extract text, remove whitespaces and unicode encodings of the minus sign and return test statistic original data plus df
extractTestStats <- function(inputText, context = FALSE, contextSize = 100) {
# F and T test patterns -
patternT <- "\\bt\\s*\\(\\s*\\d{1,}\\.?\\d*\\s*\\)\\s*=\\s*-?\\s*\\d*\\.?\\d*(\\s*,?\\s*p\\s*[<>=]\\s*\\d?\\.\\d+e?-?\\d*)?"
patternF <-  "\\bF\\s*\\(?\\s*\\d{1,},\\s*\\d{1,}\\s*\\)?\\s*=\\s*\\d*\\.?\\d*(\\s*,?\\s*p\\s*[<>=]\\s*\\d?\\.\\d+e?-?\\d*)?"
patternR <-  "\\b(((r(pb)?(?!2)\\s*\\(?\\s*(df|n)?\\s*[=]?\\s*\\d{0,10}\\s*\\)?\\s*[=]\\s*)|((correlation)\\s*(coefficient)?\\s*([=]|(of))\\s*))(\u2212?\\-?\\s?\\d*\\.?\\d{1,}))(\\s*,?\\s*p\\s*[<>=]\\s*\\d?\\.\\d+e?-?\\d*)?"
patternChiSq <- "\\b(chi|\\u03C7|\\u1D712|\\u1D61|\\u1D6a|\\u1D712|\\u1D74C|\\u1D86|\\u1D7C0)\\s*(2|square|squared)?\\s*\\(?\\s*(df|n)?\\s*[=]?\\s*\\d*\\s*\\,?\\s*(df|n)?\\s*\\=?\\s*\\d*\\s*\\)?\\s*([=]|(of))\\s*-?\\s*\\d*\\.?\\d*(\\s*,?\\s*p\\s*[<>=]\\s*\\d?\\.\\d+e?-?\\d*)?"
patternD <- "\\b[dg]\\s*[\\.\\,\\:\\;]?\\s*([=]|(of))\\s*(\\-?\\s*\\d*\\.?\\d{1,})"
patternEta <- "\\b(partial\\s*)?(\u03B7|(eta))\\s*p?\\s*2?(squared)?\\s*([=]|(of))\\s*-?\\s*\\d*\\.?\\d{1,}"
patternHR <- "\\b((HR)|(hazzard.{1,3}?ratio))\\s*((of)|(=))\\s*(\\-?\\s*\\d*\\.?\\d{1,})"
patternOR <- "\\b((OR)|(odd.{1,3}?ratio))\\s*((of)|(=))\\s*(\\-?\\s*\\d*\\.?\\d{1,})"
# Do not change order of patterns, that will break everything
patterns <- c(patternT, patternF, patternR, patternChiSq, patternD, patternEta, patternHR , patternOR)
# This is a test of one that does not capture MSEs, actually does not work because of the way that the context capture works
# str_extract("F(1,3) = 1232.12, MSE = 1232, p = 1.1232", "\\bF\\s*\\(?\\s*\\d{1,},\\s*\\d{1,}\\s*\\)?(?:\\,\\s{0,5}MSE\\s{0,5}\\,\\s{0,5}\\=\\d{1,}\\.?\\d{1,}\\,)?\\s*=\\s*\\d*\\.?\\d*(\\s*,?\\s*p\\s*[<>=]\\s*\\d?\\.\\d+e?-?\\d*)?")
if(purrr::is_empty(inputText) | !elementExists(inputText)) {
if(context == F) {
return(data_frame(statistic = NA, cleaned = NA, reported = NA, value = NA,  df1 = NA, df2  = NA, p = NA))
} else {
return(data_frame(statistic = NA, cleaned = NA, reported = NA, context = NA, value = NA,  df1 = NA, df2  = NA, p = NA))
}
}
# Input should already be cleaned, this is important as it will break this function -  processHTML() on input
# extracting all text which matches patterns
extracted <- str_extract_all(inputText , pattern = regex(patterns, ignore_case = TRUE))
# removing whitespace that can be captured in the regular expressions above
extractedClean <- lapply(extracted,  str_remove_all, pattern = "\\s")
# The following extracts the context around each extracted part:
# Putting the following into a single string that will expand to the number of patterns
if(context == T) {
patternsContext <- lapply(extracted, addContext, contextSize = contextSize)
# extracting discovered hits + context
extractedContext <- lapply(patternsContext, function(patternsContext)
unlist(str_extract(inputText, regex(as.character(patternsContext), ignore_case = T))))
# returning all of this
statisticalOutput <- rbind(data_frame(statistic = "t",   cleaned = extractedClean[[1]], reported = extracted[[1]], context = extractedContext[[1]]),
data_frame(statistic = "F",   cleaned = extractedClean[[2]], reported = extracted[[2]],  context = extractedContext[[2]]),
data_frame(statistic = "r",   cleaned = extractedClean[[3]], reported = extracted[[3]],  context = extractedContext[[3]]),
data_frame(statistic = "chi", cleaned = extractedClean[[4]], reported = extracted[[4]],  context = extractedContext[[4]]),
data_frame(statistic = "d",   cleaned = extractedClean[[5]], reported = extracted[[5]],  context = extractedContext[[5]]),
data_frame(statistic = "eta", cleaned = extractedClean[[6]], reported = extracted[[6]],  context = extractedContext[[6]]),
data_frame(statistic = "HR",  cleaned = extractedClean[[7]], reported = extracted[[7]],  context = extractedContext[[7]]),
data_frame(statistic = "OR",  cleaned = extractedClean[[8]], reported = extracted[[8]],  context = extractedContext[[8]]))
} else {
statisticalOutput <- rbind(data_frame(statistic = "t", cleaned = extractedClean[[1]], reported = extracted[[1]]),
data_frame(statistic = "F", cleaned = extractedClean[[2]], reported = extracted[[2]]),
data_frame(statistic = "r", cleaned = extractedClean[[3]], reported = extracted[[3]]),
data_frame(statistic = "chi", cleaned = extractedClean[[4]], reported = extracted[[4]]),
data_frame(statistic = "d",   cleaned = extractedClean[[5]], reported = extracted[[5]]),
data_frame(statistic = "eta", cleaned = extractedClean[[6]], reported = extracted[[6]]),
data_frame(statistic = "HR",  cleaned = extractedClean[[7]], reported = extracted[[7]]),
data_frame(statistic = "OR",  cleaned = extractedClean[[8]], reported = extracted[[8]]))
}
if(purrr::is_empty(statisticalOutput[[1]]) |  (nrow(statisticalOutput) < 1)) {
if(context == F) {
data_frame(statistic = NA, cleaned = NA, reported = NA, value = NA,  df1 = NA, df2  = NA, p = NA)
} else {
data_frame(statistic = NA, cleaned = NA, reported = NA, context = NA, value = NA,  df1 = NA, df2  = NA, p = NA)
}
} else {
cbind(statisticalOutput, splitTestStatToDF(statistic = statisticalOutput$statistic, cleanedTestStat = statisticalOutput$cleaned), stringsAsFactors = F)
}
}
extractTestStats(testTString)[[3]]
(extractTestStats(testTString)[[3]]
)
# helper function to split the output into constituate parts
splitTestStatToDF <- function(statistic, cleanedTestStat) {
if ((length(cleanedTestStat) > 0) & (length(statistic) > 0)) {
testStatistic <-
stringr::str_extract(stringr::str_split(cleanedTestStat, "=", simplify = T)[, 2],
"-?\\d*\\.?\\d*")
df1 <-
case_when(statistic == "F" ~ c(stringr::str_extract(cleanedTestStat, "\\d{1,}(?=,)")),
TRUE ~ NA_character_)
# Add other statistics here below in addition to F
df2 <-
case_when(
statistic == "F" ~ stringr::str_extract(cleanedTestStat, "(?<=,)\\d{1,}"),
# If people have reported r(n=x) return as n df2 = n - 2
stringr::str_detect(statistic, "r") & stringr::str_detect(cleanedTestStat, "n=") ~
as.character(as.numeric(
stringr::str_extract(cleanedTestStat, "(?<=([a-zA-Z])\\(?(n\\=)?)\\d{1,}")
) - 2),
stringr::str_detect(statistic, "T|t|r|R") ~ stringr::str_extract(cleanedTestStat, "(?<=([a-zA-Z])\\(?(df\\s{0,10}\\=\\s{0,10})?)\\d{1,}"),
stringr::str_detect(statistic, "chi") ~ stringr::str_extract(cleanedTestStat, "(?<=\\((df\\s{0,10}=\\s{0,10})?)\\d{1,}"),
TRUE ~ NA_character_
)
p <-
stringr::str_extract(cleanedTestStat, "(?<=(p=?))[<>]?\\d?\\.\\d+e?-?\\d*")
data_frame(
value = testStatistic,
df1 = df1,
df2 = df2,
p = p
)
} else
NA_real_
}
# Check whether element exists and is not NA (or at least that th first element of an object is not NA)
elementExists <- function( full_index_path ){
tryCatch({
len_element = length(full_index_path)
if(is.na(full_index_path)[[1]]) {return(F)}
exists_indicator = ifelse(len_element > 0, T, F)
return(exists_indicator)
}, error = function(e) {
return(F)
})
}
# Function to add + and minus "contextSize" characters for a regex pattern
addContext <- function(extracted, contextSize) {
if( length(extracted) > 0) {
newSearchR  <- extracted %>%
stringr::str_replace_all("\\.", "\\\\.") %>%
stringr::str_replace_all("\\(", "\\\\(") %>%
stringr::str_replace_all("\\)", "\\\\)") %>%
paste0(".{0,", contextSize,"}",  . ,".{0,", contextSize,"}")
}
else {
NA
}
}
# For this to work it needs to be fed a single string
# function to extract text, remove whitespaces and unicode encodings of the minus sign and return test statistic original data plus df
extractTestStats <- function(inputText, context = FALSE, contextSize = 100) {
# F and T test patterns -
patternT <- "\\bt\\s*\\(\\s*\\d{1,}\\.?\\d*\\s*\\)\\s*=\\s*-?\\s*\\d*\\.?\\d*(\\s*,?\\s*p\\s*[<>=]\\s*\\d?\\.\\d+e?-?\\d*)?"
patternF <-  "\\bF\\s*\\(?\\s*\\d{1,},\\s*\\d{1,}\\s*\\)?\\s*=\\s*\\d*\\.?\\d*(\\s*,?\\s*p\\s*[<>=]\\s*\\d?\\.\\d+e?-?\\d*)?"
patternR <-  "\\b(((r(pb)?(?!2)\\s*\\(?\\s*(df|n)?\\s*[=]?\\s*\\d{0,10}\\s*\\)?\\s*[=]\\s*)|((correlation)\\s*(coefficient)?\\s*([=]|(of))\\s*))(\u2212?\\-?\\s?\\d*\\.?\\d{1,}))(\\s*,?\\s*p\\s*[<>=]\\s*\\d?\\.\\d+e?-?\\d*)?"
patternChiSq <- "\\b(chi|\\u03C7|\\u1D712|\\u1D61|\\u1D6a|\\u1D712|\\u1D74C|\\u1D86|\\u1D7C0)\\s*(2|square|squared)?\\s*\\(?\\s*(df|n)?\\s*[=]?\\s*\\d*\\s*\\,?\\s*(df|n)?\\s*\\=?\\s*\\d*\\s*\\)?\\s*([=]|(of))\\s*-?\\s*\\d*\\.?\\d*(\\s*,?\\s*p\\s*[<>=]\\s*\\d?\\.\\d+e?-?\\d*)?"
patternD <- "\\b[dg]\\s*[\\.\\,\\:\\;]?\\s*([=]|(of))\\s*(\\-?\\s*\\d*\\.?\\d{1,})"
patternEta <- "\\b(partial\\s*)?(\u03B7|(eta))\\s*p?\\s*2?(squared)?\\s*([=]|(of))\\s*-?\\s*\\d*\\.?\\d{1,}"
patternHR <- "\\b((HR)|(hazzard.{1,3}?ratio))\\s*((of)|(=))\\s*(\\-?\\s*\\d*\\.?\\d{1,})"
patternOR <- "\\b((OR)|(odd.{1,3}?ratio))\\s*((of)|(=))\\s*(\\-?\\s*\\d*\\.?\\d{1,})"
# Do not change order of patterns, that will break everything
patterns <- c(patternT, patternF, patternR, patternChiSq, patternD, patternEta, patternHR , patternOR)
# This is a test of one that does not capture MSEs, actually does not work because of the way that the context capture works
# stringr::str_extract("F(1,3) = 1232.12, MSE = 1232, p = 1.1232", "\\bF\\s*\\(?\\s*\\d{1,},\\s*\\d{1,}\\s*\\)?(?:\\,\\s{0,5}MSE\\s{0,5}\\,\\s{0,5}\\=\\d{1,}\\.?\\d{1,}\\,)?\\s*=\\s*\\d*\\.?\\d*(\\s*,?\\s*p\\s*[<>=]\\s*\\d?\\.\\d+e?-?\\d*)?")
if(purrr::is_empty(inputText) | !elementExists(inputText)) {
if(context == F) {
return(data_frame(statistic = NA, cleaned = NA, reported = NA, value = NA,  df1 = NA, df2  = NA, p = NA))
} else {
return(data_frame(statistic = NA, cleaned = NA, reported = NA, context = NA, value = NA,  df1 = NA, df2  = NA, p = NA))
}
}
# Input should already be cleaned, this is important as it will break this function -  processHTML() on input
# extracting all text which matches patterns
extracted <- stringr::str_extract_all(inputText , pattern = regex(patterns, ignore_case = TRUE))
# removing whitespace that can be captured in the regular expressions above
extractedClean <- lapply(extracted,  stringr::str_remove_all, pattern = "\\s")
# The following extracts the context around each extracted part:
# Putting the following into a single string that will expand to the number of patterns
if(context == T) {
patternsContext <- lapply(extracted, addContext, contextSize = contextSize)
# extracting discovered hits + context
extractedContext <- lapply(patternsContext, function(patternsContext)
unlist(stringr::str_extract(inputText, regex(as.character(patternsContext), ignore_case = T))))
# returning all of this
statisticalOutput <- rbind(data_frame(statistic = "t",   cleaned = extractedClean[[1]], reported = extracted[[1]], context = extractedContext[[1]]),
data_frame(statistic = "F",   cleaned = extractedClean[[2]], reported = extracted[[2]],  context = extractedContext[[2]]),
data_frame(statistic = "r",   cleaned = extractedClean[[3]], reported = extracted[[3]],  context = extractedContext[[3]]),
data_frame(statistic = "chi", cleaned = extractedClean[[4]], reported = extracted[[4]],  context = extractedContext[[4]]),
data_frame(statistic = "d",   cleaned = extractedClean[[5]], reported = extracted[[5]],  context = extractedContext[[5]]),
data_frame(statistic = "eta", cleaned = extractedClean[[6]], reported = extracted[[6]],  context = extractedContext[[6]]),
data_frame(statistic = "HR",  cleaned = extractedClean[[7]], reported = extracted[[7]],  context = extractedContext[[7]]),
data_frame(statistic = "OR",  cleaned = extractedClean[[8]], reported = extracted[[8]],  context = extractedContext[[8]]))
} else {
statisticalOutput <- rbind(data_frame(statistic = "t", cleaned = extractedClean[[1]], reported = extracted[[1]]),
data_frame(statistic = "F", cleaned = extractedClean[[2]], reported = extracted[[2]]),
data_frame(statistic = "r", cleaned = extractedClean[[3]], reported = extracted[[3]]),
data_frame(statistic = "chi", cleaned = extractedClean[[4]], reported = extracted[[4]]),
data_frame(statistic = "d",   cleaned = extractedClean[[5]], reported = extracted[[5]]),
data_frame(statistic = "eta", cleaned = extractedClean[[6]], reported = extracted[[6]]),
data_frame(statistic = "HR",  cleaned = extractedClean[[7]], reported = extracted[[7]]),
data_frame(statistic = "OR",  cleaned = extractedClean[[8]], reported = extracted[[8]]))
}
if(purrr::is_empty(statisticalOutput[[1]]) |  (nrow(statisticalOutput) < 1)) {
if(context == F) {
data_frame(statistic = NA, cleaned = NA, reported = NA, value = NA,  df1 = NA, df2  = NA, p = NA)
} else {
data_frame(statistic = NA, cleaned = NA, reported = NA, context = NA, value = NA,  df1 = NA, df2  = NA, p = NA)
}
} else {
cbind(statisticalOutput, splitTestStatToDF(statistic = statisticalOutput$statistic, cleanedTestStat = statisticalOutput$cleaned), stringsAsFactors = F)
}
}
extractTestStats(testTString)[[3]]
extractTestStats(testTString)[[3]]
library(tidyverse)
library(tibble)
extractTestStats(testTString)[[3]]
expect_identical(extractTestStats(testTString)[[2]],
str_remove_all(testT, "\\s")
)
extractTestStats(testTString)[[2]]
str_remove_all(testT, "\\s")
extractTestStats(testChiString)[[2]],
str_remove_all(testChi, "\\s")
extractTestStats(testChiString)[[2]]
str_remove_all(testChi, "\\s")
extractTestStats(testTString)[[3]]
testT
expect_identical(extractTestStats(testTString)[[2]]
extractTestStats(testTString)[[2]]
str_remove_all(testT, "\\s")
str_remove_all(testT, "\\s") == extractTestStats(testTString)[[2]]
identical(extractTestStats(testFString)[[2]],
str_remove_all(testF, "\\s"))
context("test-extractor")
library(stringr)
library(base)
library(dplyr)
library(tibble)
# test sets
testF <- c("F(1, 12345) = 12.42345",
"F(1,12345)=12.42345",
"F(1, 12345) = 12.42345",
"F (1, 12345) = 12.42345",
"F ( 1, 12345 ) = 1",
"F ( 1, 12345 ) = .42345",
"F ( 1, 12345 ) = 12.",
"F ( 1, 12345 ) = 12.,  p = .01",
"F ( 1, 12345 ) = 12 p = 1.01",
"F(1, 12345) = 12.42345, p < .01",
"F1, 12345 = 12.42345, p < .01")
testT <- c("t(15) = 12.42345",
"t(1)=12.42345",
"t(15) = 12.42345",
"t(145) = 12.42345",
"t(1345 ) = 1",
"t(1345 ) = .42345",
"t(1345 ) = 12.",
"t(15) = -12.42345",
"t(1)=-12.42345",
"t(15) = -12.42345",
"t(145) = -12.42345",
"t(1345 ) = -1",
"t(1345 ) = -.42345",
"t(1345 ) = -12",
"t(15) = - 12.42345",
"t(1)=- 12.42345",
"t(15) = - 12.42345",
"t(145) = - 12.42345",
"t(1345 ) = - 1",
"t(1345 ) = - .42345",
"t(1345 ) = - 12",
"t(15) = 12.42345",
"t (1)=12.42345",
"t (15) = 12.42345",
"t (145) = 12.42345",
"t (1345 ) = 1",
"t (1345 ) = .42345",
"t (1345 ) = 12.",
"t (1345 ) = 12.0, p = .99")
testR <- c("r(1) = .42345",
"r(2)= .1345",
"r(3) = 0.4234",
"r( 4 ) = 0.45",
"r(df = 5) = 1",
"r (n=6) = .45",
"r = .7",
"correlation of 8",
"R2 = .12", # note this should not be included
"correlation of 8, p = .009")
testChi <- c("chi square = 12.32",
"chi2 = 123.32",
"χ2(123) = 1232.23, p < .05",
"χ2 = 122.23,p = .13",
"chi2(123) = 123.2, p < .001",
"χ2(1, N = 320) = 22.31, p < 0.001")
testTString  <- str_flatten(testT, collapse = " ")
testFString  <- str_flatten(testF, collapse = " ")
testRString  <- str_flatten(testR, collapse = " ")
testChiString  <- str_flatten(testChi, collapse = " ")
test_that("t test extractor works", {
expect_identical(extractTestStats(testTString)[[3]], testT)
expect_identical(extractTestStats(testTString)[[2]],
str_remove_all(testT, "\\s"))
})
test_that("F test extractor works", {
expect_identical(extractTestStats(testFString)[[3]], testT)
expect_identical(extractTestStats(testFString)[[2]],
str_remove_all(testF, "\\s"))
})
test_that("correlational test extractor works", {
expect_identical(extractTestStats(testRString)[[3]], testT)
expect_identical(extractTestStats(testRString)[[2]],
str_remove_all(testR, "\\s"))
})
test_that("chi test extractor works", {
expect_identical(extractTestStats(testChiString)[[3]], testT)
expect_identical(extractTestStats(testChiString)[[2]],
str_remove_all(testChi, "\\s"))
})
test_that::expect_identical(extractTestStats(testFString)[[2]],
stringr::str_remove_all(testF, "\\s"))
testthat::expect_identical(extractTestStats(testFString)[[2]],
stringr::str_remove_all(testF, "\\s"))
testthat::expect_identical(extractTestStats(testFString)[[2]],
stringr::str_remove_all(testF, "\\s"))
identical(extractTestStats(testFString)[[2]],
stringr::str_remove_all(testF, "\\s"))
context("test-extractor")
library(stringr)
library(base)
library(dplyr)
library(tibble)
# test sets
testF <- c("F(1, 12345) = 12.42345",
"F(1,12345)=12.42345",
"F(1, 12345) = 12.42345",
"F (1, 12345) = 12.42345",
"F ( 1, 12345 ) = 1",
"F ( 1, 12345 ) = .42345",
"F ( 1, 12345 ) = 12.",
"F ( 1, 12345 ) = 12.,  p = .01",
"F ( 1, 12345 ) = 12 p = 1.01",
"F(1, 12345) = 12.42345, p < .01",
"F1, 12345 = 12.42345, p < .01")
testT <- c("t(15) = 12.42345",
"t(1)=12.42345",
"t(15) = 12.42345",
"t(145) = 12.42345",
"t(1345 ) = 1",
"t(1345 ) = .42345",
"t(1345 ) = 12.",
"t(15) = -12.42345",
"t(1)=-12.42345",
"t(15) = -12.42345",
"t(145) = -12.42345",
"t(1345 ) = -1",
"t(1345 ) = -.42345",
"t(1345 ) = -12",
"t(15) = - 12.42345",
"t(1)=- 12.42345",
"t(15) = - 12.42345",
"t(145) = - 12.42345",
"t(1345 ) = - 1",
"t(1345 ) = - .42345",
"t(1345 ) = - 12",
"t(15) = 12.42345",
"t (1)=12.42345",
"t (15) = 12.42345",
"t (145) = 12.42345",
"t (1345 ) = 1",
"t (1345 ) = .42345",
"t (1345 ) = 12.",
"t (1345 ) = 12.0, p = .99")
testR <- c("r(1) = .42345",
"r(2)= .1345",
"r(3) = 0.4234",
"r( 4 ) = 0.45",
"r(df = 5) = 1",
"r (n=6) = .45",
"r = .7",
"correlation of 8",
"R2 = .12", # note this should not be included
"correlation of 8, p = .009")
testChi <- c("chi square = 12.32",
"chi2 = 123.32",
"χ2(123) = 1232.23, p < .05",
"χ2 = 122.23,p = .13",
"chi2(123) = 123.2, p < .001",
"χ2(1, N = 320) = 22.31, p < 0.001")
testTString  <- str_flatten(testT, collapse = " ")
testFString  <- str_flatten(testF, collapse = " ")
testRString  <- str_flatten(testR, collapse = " ")
testChiString  <- str_flatten(testChi, collapse = " ")
test_that("t test extractor works", {
expect_identical(extractTestStats(testTString)[[3]], testT)
expect_identical(extractTestStats(testTString)[[2]],
str_remove_all(testT, "\\s"))
})
test_that("F test extractor works", {
expect_identical(extractTestStats(testFString)[[3]], testT)
testthat::expect_identical(extractTestStats(testFString)[[2]],
stringr::str_remove_all(testF, "\\s"))
})
test_that("correlational test extractor works", {
expect_identical(extractTestStats(testRString)[[3]], testT)
expect_identical(extractTestStats(testRString)[[2]],
str_remove_all(testR, "\\s"))
})
test_that("chi test extractor works", {
expect_identical(extractTestStats(testChiString)[[3]], testT)
expect_identical(extractTestStats(testChiString)[[2]],
str_remove_all(testChi, "\\s"))
})
str_remove_all(testR, "\\s")
extractTestStats(testRString)[[2]]
extractTestStats(testChiString)[[2]]
str_remove_all(testChi, "\\s")
str_remove_all(testR, "\\s")
extractTestStats(testTString)
extractTestStats(testTString)[[3]]
extractTestStats(testFString)[[3]]
library(tidyverse)
warnings()
library(tidyverse)
Authors@R: person("Felix", "Singleton Thorn", email = "fsingletonthorn@gmail.com",
role = c("aut", "cre"))
person("Felix", "Singleton Thorn", email = "fsingletonthorn@gmail.com",
role = c("aut", "cre"))
testD <- c("g = 12.32, p = .053",
"d = 1",
"d = 1232.23")
testDString <- str_flatten(testD, collapse = " ")
extractTestStats(testDString)[[3]]
testEta <- c("η = .3213",
"eta squared = 1.232",
"η2 = .3213")
testEta <- c("η = .3213",
"eta squared = 1.232",
"η2 = .3213")
testTString  <- str_flatten(testT, collapse = " ")
testFString  <- str_flatten(testF, collapse = " ")
testRString  <- str_flatten(testR, collapse = " ")
testChiString  <- str_flatten(testChi, collapse = " ")
testDString <- str_flatten(testD, collapse = " ")
testEtaString <- str_flatten(testEta, collapse = " ")
